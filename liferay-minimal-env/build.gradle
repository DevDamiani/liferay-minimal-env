plugins {
    id "java-gradle-plugin"
    id "com.gradle.plugin-publish" version "1.2.1"
    id 'maven-publish'

    alias(libs.plugins.jvm)
}

repositories {
    mavenLocal()
    gradlePluginPortal()
}

dependencies {
    testImplementation 'org.jetbrains.kotlin:kotlin-test-junit5'

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

group = 'io.github.devdamiani.gradle'
version = '0.7.2'

gradlePlugin {
    website = "https://github.com/DevDamiani/liferay-minimal-env"
    vcsUrl = "https://github.com/DevDamiani/liferay-minimal-env.git"
    plugins {

        liferayMinimal {
            id = "io.github.devdamiani.liferay-minimal-env"
            displayName = "Liferay Environment Minimal Plugin"
            description = "A Gradle plugin designed to automatically configure and provision all necessary services to create a fully functional Liferay environment. This plugin streamlines the setup process, ensuring that all components such as databases, search engines, and other dependencies are configured and ready for Liferay deployment."
            tags.addAll("liferay", "docker")
            implementationClass = "io.github.devdamiani.gradle.liferayMinimal.LiferayMinimalEnvPlugin"
        }
    }
}

publishing {
    repositories {
        mavenLocal()
        maven {
            name = "GitHubPackages"
            url = "https://maven.pkg.github.com/DevDamiani/liferay-minimal-env"
            credentials {
                username = findProperty("gpr.user") ?: System.getenv('GPR_USER')
                password = findProperty("gpr.token") ?: System.getenv('GPR_TOKEN')
            }
        }
    }
}

tasks.register('zipResources', Zip) {

    def extraDir = file('extra-resources')

    doFirst {
        def outputDir = file("${project.layout.buildDirectory.get()}/zip/versions")
        outputDir.mkdirs()

        extraDir.eachDir { folder ->
            def zipFile = new File(outputDir, "${folder.name}.zip")


            exec {
                commandLine 'zip', '-r', zipFile.absolutePath, "."
                workingDir = file("extra-resources/$folder.name")
            }
        }
    }


    from file('extra-resources')
    archiveFileName = 'content.zip'
    destinationDirectory = file("${project.layout.buildDirectory.get()}/zip")
}

tasks.register('copyZipToResources', Copy) {
    dependsOn(tasks.named('zipResources'))
    from(tasks.named('zipResources').get().destinationDirectory)

    into(file("${sourceSets.main.output.resourcesDir}"))
}

tasks.named('processResources') {
    dependsOn(tasks.named('copyZipToResources'))
}